## Created With Iro: https://eeyo.io/iro/


name                   = meta
file_extensions []     = meta;

################################################################
## Constants
################################################################

__SPECIAL_CHARACTERS \= (\||\$|%|&|=|\*|~)

__VARIABLES \= (:[A-Za-z][A-Za-z0-9_]+)

__DEFINITION \= ([A-Za-z][A-Za-z0-9_]+)

__KEYWORD \= (\.[A-Za-z][A-Za-z0-9_]+)

################################################################
## Styles
################################################################

styles [] {

.comment : style {
   color                 = light_green
   italic                = true
   textmate_scope        = comment.line.meta
   pygments_scope        = Comment
}

.keyword : style {
   color     = cyan
   ace_scope             = keyword
   textmate_scope        = keyword
   pygments_scope        = Keyword
}

.numeric : style {
   color                 = gold
   textmate_scope        = constant.numeric
   pygments_scope        = Number
}

.punctuation : style {
   color     = red_2
   textmate_scope        = punctuation.definition.bold.meta
   pygments_scope        = Punctuation
}

.text : style {
   color                 = brown
   textmate_scope        = string.quoted.double.meta
   pygments_scope        = String
}

.variable : style {
   color                 = blue
   textmate_scope        = entity.name.variable.meta
}

.definition : style {
   color                 = violet
   ace_scope             = variable
   textmate_scope        = variable
}

}

#################################################
## Parse contexts
#################################################

contexts [] {

##############################################
## Main Context - Entry point context
##############################################

main : context {
   
   : pattern {
      regex \= $${__SPECIAL_CHARACTERS}
      styles[] = .keyword;
   }
   
   : pattern {
      regex \= $${__VARIABLES}
      styles[] = .variable;
   }
   
   : pattern {
      regex \= $${__DEFINITION}
      styles[] = .definition;
   }
   
   : pattern {
      regex \= $${__KEYWORD}
      styles[] = .keyword;
   }
   
   : include "numeric" ;
   
   : inline_push {
      regex          \= (\[)
      styles []       = .punctuation;
      : pop {  
         regex       \= (\])
         styles []    = .punctuation;
      }
      : include "main" ;
   }
   
   : inline_push {
      regex          \= (\{)
      styles []       = .punctuation;
      : pop {  
         regex       \= (\})
         styles []    = .punctuation;
      }
      : include "main" ;
   }
   
   : pattern {
      regex          \= (;)
      styles []       = .punctuation;
   }
   
   : inline_push {
      regex          \= (\")
      styles []       = .punctuation;
      default_style   = .text
      : pop {
         regex       \= (\")
         styles []    = .punctuation;
      }
   }
   
   : inline_push {
      regex          \= (\()
      styles []       = .punctuation;
      : pop {
         regex       \= (\))
         styles []    = .punctuation;
      }
      : include "main";
   }
   
   : include "multi_line_comment" ;
   
   : pattern {
      regex          \= (//.*)
      styles []       = .comment;
   }
   
}

#################################################
## End of Contexts
#################################################

###########################################
## Numeric Context
###########################################

numeric : context {
   : pattern {
      regex          \= (\b\d+)
      styles []       = .numeric;
   }
}

###########################################
## Single Line Comment Context
###########################################

single_line_comment : context {
   description        = singleline
   : pattern {
      regex          \= (^//.*$)
      styles []       = .comment;
   }
}

###########################################
## Multi Line Comment Context
###########################################

multi_line_comment : context {
   description        = multiline
   : inline_push {
      regex          \= (/\*)
      styles []       = .comment;
      default_style   = .comment
      : pop {
         regex       \= (\*/)
         styles []    = .comment;
      }
   }
}
   
}
